#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../index');
const path = require('path');
require('dotenv').config();
//var debug = require('debug')('exp-exp2:server');
//var http = require('http');
// Requiring our models for syncing
var db = require(path.join(__dirname,'../app', 'models'));
/**
 * Get port from environment and store in Express.
 */

var port = process.env.PORT || '80';
console.log(port)
app.set('port', port);
if(process.env.NODE_ENV === 'development'){
	forcebool = true;
}
/**
 * Create HTTP server.
 */

//var server = http.createServer(app);
// Syncing our sequelize models and then starting our express app
// Include the {force: true} parameter if you need to update the models
db.sequelize.sync({force: forcebool}).then(function() {
  app.listen(port, function() {
    console.log("Startup Management webapp is listening on PORT " + port);
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */


// server.on('error', onError);
// server.on('listening', onListening);

// /**
//  * Normalize a port into a number, string, or false.
//  */

// function normalizePort(val) {
//   var port = parseInt(val, 10);

//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }

//   if (port >= 0) {
//     // port number
//     return port;
//   }

//   return false;
// }

// /**
//  * Event listener for HTTP server "error" event.
//  */

// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }

//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

// /**
//  * Event listener for HTTP server "listening" event.
//  */

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
